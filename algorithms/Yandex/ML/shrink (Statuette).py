"""
Условие:
Петя приехал в экзотическую страну и решил купить памятный сувенир. В сувенирной лавке в ряд выставлены
n статуэток различных видов, причем статуэтка вида t стоит ровно t единиц местной валюты.
Петя решил купить статуэтки всех видов от 1 до k. Оказалось, что Петя получит приличную скидку, если купит
статуэтки, стоящие не в произвольных местах, а некоторым непрерывным отрезком
(все статуэтки от какой-то позиции l до r включительно).
Петя сразу понял, что ему может потребоваться купить несколько статуэток одного вида, повторяющиеся он
решил подарить друзьям после возвращения домой.
Например, если в лавке статуэтки выставлены в порядке 1 2 2 3 3 1, и Петя хочет купить статуэтки видов от
1 до 3, то он может купить статуэтки с первой по четвертую позиции (при этом будут куплены две статуэтки вида 2).
Если же в лавке выставлены статуэтки 1 2 5 4 3 (вновь k=3), то Петя купит все 5 статуэток.
Помогите определить Пете минимальную суммарную стоимость статуэток, расположенных подряд в лавке,
чтобы среди них были статуэтки всех видов от 1 до k.
"""

"""
10 3
3 3 2 90 2 1 45 2 2 3 3 1 3 3 1
Ans: 9
"""

"""
6 3
1 2 2 3 3 1
Ans: 8
"""

"""
5 3
1 2 5 4 3
Ans: 15
"""


def shrink(count_sum):
    global vec, freq_dict, cur_seq, seq_size, left, right, min_sum
    """сужаем диапазон слева (right не изменяется) до тех пор, пока не встретим элемент, который находится в нашем
    диапазоне один раз - мы не можем его удалить, потому что последовательность не будет удовлетворять условиям"""
    for i in range(left, right):
        if vec[i] <= seq_size:
            if freq_dict[vec[i]] == 1:
                break
            freq_dict[vec[i]] -= 1
        left += 1
        count_sum -= vec[i]

    """После сужения находим новый минимум"""
    min_sum = min(min_sum, count_sum)

    """Инвариант задачи заключается в том, что теперь если и существует сумма, меньшая этой, то она точно
    не включает в себя указатель left, потому что следующим шагом мы будем увеличивать диапазон, поэтому при
    том же left новый диапазон будет точно не меньше предыдущего"""
    freq_dict[vec[left]] -= 1
    count_sum -= vec[left]
    cur_seq.add(vec[left])
    left += 1
    return count_sum


def run():
    global vec, freq_dict, cur_seq, seq_size, left, right
    count_sum = 0
    for i in range(len(vec)):
        if vec[i] <= seq_size:
            if len(cur_seq) == seq_size:
                left = i
            freq_dict[vec[i]] = freq_dict.setdefault(vec[i], 0) + 1
            cur_seq.discard(vec[i])

        if len(cur_seq) < seq_size:
            count_sum += vec[i]
            if len(cur_seq) == 0:
                right = i
                count_sum = shrink(count_sum)


if __name__ == "__main__":
    vec_size, seq_size = map(int, input().split())
    vec = list(map(int, input().split()))
    cur_seq = {i for i in range(1, seq_size + 1)}
    freq_dict = {}
    left = right = 0
    min_sum = float("inf")
    run()
    print(min_sum)
